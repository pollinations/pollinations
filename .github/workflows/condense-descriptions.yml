name: Auto-Condense PR/Issue Descriptions and Comments

on:
  pull_request:
    types: [opened, edited]
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]
  pull_request_review_comment:
    types: [created, edited]

jobs:
  condense:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    
    steps:
      - name: Debounce - Wait for edits to settle
        uses: zachary95/github-actions-debounce@v1
        with:
          wait: 180  # Wait 3 minutes for edits to stop
          
      - name: Check if description needs condensing
        id: check
        uses: actions/github-script@v7
        env:
          POLLINATIONS_TOKEN: ${{ secrets.POLLINATIONS_NECTAR_API_TOKEN }}
        with:
          script: |
            const body = context.payload.pull_request?.body || context.payload.issue?.body || context.payload.comment?.body || '';
            
            // Skip if already condensed or too short
            if (body.includes('Description condensed by [pollinations.ai](https://pollinations.ai)') || body.length < 200) {
              console.log('Skipping: Already condensed or too short');
              return { shouldCondense: false };
            }
            
            // Use Claude to classify if text is wordy and AI-generated
            const classificationPrompt = `Analyze this GitHub PR/issue description and determine if it's overly verbose and likely AI-generated.

            Characteristics of wordy AI-generated text:
            - Excessive use of emojis (âœ¨ðŸŽ¯ðŸ”§ðŸš€ðŸ’¡)
            - Formal section headers (## Overview, ## Summary, etc.)
            - Marketing-style language ("This PR implements/introduces/provides")
            - Unnecessary detail and repetition
            - Tables comparing before/after states
            
            Text to analyze:
            ${body}
            
            Respond with ONLY the word "true" or "false".`;
            
            try {
              const response = await fetch('https://text.pollinations.ai/openai', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${process.env.POLLINATIONS_TOKEN}`
                },
                body: JSON.stringify({
                  model: 'claudyclaude',
                  messages: [{ role: 'user', content: classificationPrompt }],
                  temperature: 0.3,
                  max_tokens: 10
                })
              });
              
              if (!response.ok) {
                console.log('Classification API failed, skipping condensing');
                return { shouldCondense: false };
              }
              
              const data = await response.json();
              const answer = data.choices[0].message.content.trim().toLowerCase();
              const shouldCondense = answer.includes('true');
              
              console.log(`Body length: ${body.length}, Classification: "${answer}", Should condense: ${shouldCondense}`);
              return { shouldCondense, originalBody: body };
            } catch (error) {
              console.log('Classification error:', error.message);
              return { shouldCondense: false };
            }
      
      - name: Condense description with text.pollinations.ai
        if: fromJSON(steps.check.outputs.result).shouldCondense
        id: condense
        uses: actions/github-script@v7
        env:
          POLLINATIONS_TOKEN: ${{ secrets.POLLINATIONS_NECTAR_API_TOKEN }}
          CHECK_RESULT: ${{ steps.check.outputs.result }}
        with:
          script: |
            const originalBody = JSON.parse(process.env.CHECK_RESULT).originalBody;
            
            const prompt = 'Condense this GitHub PR/issue description following these rules:\n\nCURRENT DESCRIPTION:\n' + originalBody + '\n\nCONDENSING RULES:\n- Start with brief one-line summary\n- Use bullet points for changes/features\n- Use bullet points for benefits (if needed)\n- NO long paragraphs\n- NO excessive emojis (âœ¨ðŸŽ¯ðŸ”§ etc.)\n- NO formal section headers\n- NO tables comparing before/after\n- NO marketing language\n- NO overly detailed explanations\n\nEXAMPLE FORMAT:\nAdds feature X.\n\n**Changes:**\n- Item 1\n- Item 2\n\n**Benefits:**\n- Benefit 1\n- Benefit 2\n\nReturn ONLY the condensed description, no explanations.';

            // Call text.pollinations.ai API
            const response = await fetch('https://text.pollinations.ai/openai', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.POLLINATIONS_TOKEN}`
              },
              body: JSON.stringify({
                model: 'claudyclaude',
                messages: [
                  { role: 'user', content: prompt }
                ],
                temperature: 0.3,
                max_tokens: 1000
              })
            });
            
            if (!response.ok) {
              throw new Error(`API call failed: ${response.status} ${response.statusText}`);
            }
            
            const data = await response.json();
            const condensedText = data.choices[0].message.content.trim();
            
            // Add disclaimer (original link will be in edit history)
            const finalBody = `${condensedText}\n\n---\n*Description condensed by [pollinations.ai](https://pollinations.ai) for readability.*`;
            
            console.log('Condensed successfully');
            return { condensedBody: finalBody };
      
      - name: Update PR description
        if: github.event_name == 'pull_request' && fromJSON(steps.check.outputs.result).shouldCondense
        uses: actions/github-script@v7
        with:
          script: |
            const condensedBody = JSON.parse(process.env.CONDENSE_RESULT).condensedBody;
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: condensedBody
            });
            
            console.log('PR description updated');
        env:
          CONDENSE_RESULT: ${{ steps.condense.outputs.result }}
      
      - name: Update issue description
        if: github.event_name == 'issues' && fromJSON(steps.check.outputs.result).shouldCondense
        uses: actions/github-script@v7
        with:
          script: |
            const condensedBody = JSON.parse(process.env.CONDENSE_RESULT).condensedBody;
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: condensedBody
            });
            
            console.log('Issue description updated');
        env:
          CONDENSE_RESULT: ${{ steps.condense.outputs.result }}
      
      - name: Update issue comment
        if: github.event_name == 'issue_comment' && fromJSON(steps.check.outputs.result).shouldCondense
        uses: actions/github-script@v7
        with:
          script: |
            const condensedBody = JSON.parse(process.env.CONDENSE_RESULT).condensedBody;
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              body: condensedBody
            });
            
            console.log('Issue comment updated');
        env:
          CONDENSE_RESULT: ${{ steps.condense.outputs.result }}
      
      - name: Update PR review comment
        if: github.event_name == 'pull_request_review_comment' && fromJSON(steps.check.outputs.result).shouldCondense
        uses: actions/github-script@v7
        with:
          script: |
            const condensedBody = JSON.parse(process.env.CONDENSE_RESULT).condensedBody;
            
            await github.rest.pulls.updateReviewComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              body: condensedBody
            });
            
            console.log('PR review comment updated');
        env:
          CONDENSE_RESULT: ${{ steps.condense.outputs.result }}
